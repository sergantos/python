import pygame
import random
import math
import copy

MX = MY = 512           # Размер массива с плазмой

SizePX = 70             # Размеры размывающего прямоугольника.
SizePY = 60

scale = 1               # Масштаб точек для вывода на экран

SX = MX * scale         # Размер экрана исходя из размера плазмы и ее масштаба
SY = MX * scale

scr = []                # Промежуточный список для хранения экрана

line = [0] * MX         # Создаем список из нулей длиной MX

scr = []                # Создаем список списков из нулей длиной MY, в итоге получится квадратная таблица из нулей.
for y in range(0, MY):
    scr.append(copy.deepcopy(line))

pygame.init()
screen = pygame.display.set_mode((SX, SY))
running = True

pal = []                # Палитра для графического эффекта

                        # Задаем плавный переход от черного к красному, а затем от красного к черному.
# for i in range(0, 255):
#     pal.append([abs(round(math.sin(i * math.pi / 64.0)*200.0)), 0, 0])

for i in range(0, 255, 4):          # Задаем переходы цветов.
    pal.append([0, 0, i])
for i in range(0, 255, 4):
    pal.append([i, 0, (255-i)])
for i in range(0, 255, 4):
    pal.append([255, i, 0])
for i in range(0, 255, 4):
    pal.append([255, 255, i])
for i in range(255, 0, -4):
    pal.append([255, 255, i])
for i in range(255, 0, -4):
    pal.append([255, i, 0])
for i in range(255, 0, -4):
    pal.append([i, 0, (255-i)])
for i in range(255, 0, -4):          
    pal.append([0, 0, i])


pX = pY = 100           # Начальное положение прямоугольника на экране
sX = sY = 3             # Скорость его движения по осям координат.

# -------------------------------------------------------------------------------------------------------
#  Отрисовка закрашенного квадрата в нужных координатах, определенного размера.
# -------------------------------------------------------------------------------------------------------
def drawBox(x, y, size, color):
    pygame.draw.rect(screen, pal[color], (x, y, size, size))

# -------------------------------------------------------------------------------------------------------
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    for y in range(pY, pY + SizePY):                        # Проходим по точкам принадлежищим прямоугольнику
        for x in range(pX, pX + SizePX):
            if (x in range(0, MX)) and (y in range(0, MY)): # Если мы не вышли за пределы экрана, то выполняем действия
                scr[y][x] += 1                              # Увеличиваем цвет точки на 1
                if scr[y][x] >= len(pal):                   # Если она стала цветом вне палитры, сбрасываем цвет на 0.
                    scr[y][x] = 0
                drawBox(x * scale, y * scale, scale, scr[y][x])     # Рисуем точку на экране.


    # Если наш прямоугольник выходит за границы нашего экрана,
    # то меняем скорость движения по оси (на которой он вышел за границу)
    # на противоположную.
    # Также направление меняется, если выпало случайное число, при котором будем менять направление.
    # Это позволяет хаотически двигаться прямоугольнику.
    if random.randint(0,10) == 4 or x not in range(0, MX):
        sX *= -1
    if random.randint(0,10) == 7 or y not in range(0, MY):
        sY *= -1

    # Изменяем экранные координаты прямоугольника. Просто прибавляем к ним скорость движения по осям.
    pX += sX
    pY += sY

    pygame.display.flip()

pygame.quit()